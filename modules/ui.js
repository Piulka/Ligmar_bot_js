// –ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
window.BotUI = {
    isAuthorized: false, // –§–ª–∞–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    buttonObserver: null,
    lastPingElement: null,
    buttonsVisible: false,
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
     */
    initializeButtonPositioning() {
        const self = this;

        /**
         * –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ping —ç–ª–µ–º–µ–Ω—Ç–∞
         */
        function positionAllButtons() {
            const pingElement = document.querySelector('.header-ping');
            if (!pingElement) return;

            self.positionButtonsRelativeToPing(pingElement);
            
            // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞/–ø–æ–∑–∏—Ü–∏–∏ ping —ç–ª–µ–º–µ–Ω—Ç–∞
            window.addEventListener('resize', () => {
                const currentPing = document.querySelector('.header-ping');
                if (currentPing) {
                    self.positionButtonsRelativeToPing(currentPing);
                }
            });
        }

        // MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è ping —ç–ª–µ–º–µ–Ω—Ç–∞
        this.buttonObserver = new MutationObserver(() => {
            const pingElement = document.querySelector('.header-ping');
            const pingVisible = pingElement && pingElement.offsetParent !== null;

            if (pingVisible && !self.buttonsVisible) {
                console.log('üìç Ping —ç–ª–µ–º–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É—é –∫–Ω–æ–ø–∫–∏');
                positionAllButtons();
                self.buttonsVisible = true;
                self.lastPingElement = pingElement;
            } else if (!pingVisible && self.buttonsVisible) {
                console.log('üìç Ping —ç–ª–µ–º–µ–Ω—Ç —Å–∫—Ä—ã—Ç');
                self.buttonsVisible = false;
                self.lastPingElement = null;
            } else if (pingVisible && self.buttonsVisible) {
                // –ï—Å–ª–∏ ping —ç–ª–µ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª –ø–æ–∑–∏—Ü–∏—é, –ø–µ—Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
                positionAllButtons();
            }
        });

        this.buttonObserver.observe(document.body, { childList: true, subtree: true, attributes: true });

        // –ï—Å–ª–∏ ping —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        const initialPing = document.querySelector('.header-ping');
        if (initialPing && initialPing.offsetParent !== null) {
            console.log('üìç Ping —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            positionAllButtons();
            self.buttonsVisible = true;
            self.lastPingElement = initialPing;
        }
    },

    /**
     * –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ping —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    positionButtonsRelativeToPing(pingElement) {
        const pingRect = pingElement.getBoundingClientRect();
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const activitiesButton = document.getElementById('boss-dropdown-button');
        if (activitiesButton) {
            this.positionButtonFixed(activitiesButton, pingRect.right + 5, pingRect.top);
        }

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∞–ª–º–∞–∑ (–µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        const authButton = document.getElementById('auth-button');
        if (authButton && !this.isAuthorized) {
            const activitiesRect = activitiesButton ? activitiesButton.getBoundingClientRect() : null;
            if (activitiesRect) {
                this.positionButtonFixed(authButton, activitiesRect.right + 5, activitiesRect.top);
            }
        }

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        const settingsButton = document.getElementById('settings-button');
        if (settingsButton && this.isAuthorized) {
            const activitiesRect = activitiesButton ? activitiesButton.getBoundingClientRect() : null;
            if (activitiesRect) {
                this.positionButtonFixed(settingsButton, activitiesRect.right + 5, activitiesRect.top);
            }
        }

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–ª–µ–π (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        const controlButton = document.getElementById('control-button');
        if (controlButton && this.isAuthorized) {
            const settingsRect = settingsButton ? settingsButton.getBoundingClientRect() : null;
            if (settingsRect) {
                this.positionButtonFixed(controlButton, settingsRect.right + 5, settingsRect.top);
            }
        }
    },

    /**
     * –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
     */
    positionButtonFixed(button, left, top) {
        button.style.position = 'fixed';
        button.style.left = left + 'px';
        button.style.top = top + 'px';
        button.style.zIndex = '1001';
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async createAuthButton() {
        if (document.getElementById('auth-button') || this.isAuthorized) return;

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∞–ª–º–∞–∑–∏–∫–æ–º
        const authButton = this.createStyledButton('auth-button', 'üíé');
        
        authButton.addEventListener('click', async () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            const isAuthorized = await window.BotSecurity.showPasswordModal('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            if (isAuthorized) {
                this.isAuthorized = true;
                // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                authButton.remove();
                // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                await this.createMainButtons();
                // –ü–µ—Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
                this.repositionAllButtons();
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ body (–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É)
        document.body.appendChild(authButton);
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async createMainButtons() {
        await this.createSettingsButton();
        await this.createControlButton();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –±–æ—Å—Å–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (window.BotGameLogic && window.BotGameLogic.updateBossButtonsVisibility) {
            window.BotGameLogic.updateBossButtonsVisibility();
        }
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async createSettingsButton() {
        if (document.getElementById('settings-button')) return;

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const button = this.createStyledButton('settings-button', '‚öô');
        
        button.addEventListener('click', () => {
            const settingsWindow = document.getElementById('settings-window');
            if (settingsWindow) {
                const isVisible = settingsWindow.style.display !== 'none';
                settingsWindow.style.display = isVisible ? 'none' : 'block';
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ body (–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É)
        document.body.appendChild(button);
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
     * @param {string} id - ID –∫–Ω–æ–ø–∫–∏
     * @param {string} icon - –∏–∫–æ–Ω–∫–∞
     */
    createStyledButton(id, icon) {
        const button = document.createElement('button');
        button.id = id;
        
        Object.assign(button.style, {
            width: '40px',
            height: '33px',
            background: 'radial-gradient(circle, rgba(20,15,30,0.95) 0%, rgba(10,8,15,0.98) 100%)',
            color: '#FFD700',
            border: '1px solid rgba(128,128,128,0.3)',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '11px',
            fontWeight: 'bold',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: '0 2px 4px rgba(0,0,0,0.3)',
            transition: 'all 0.2s ease',
            letterSpacing: '0.5px',
            fontFamily: 'Segoe UI, Arial, sans-serif',
            userSelect: 'none',
            outline: 'none',
            margin: '0',
            position: 'relative',
            overflow: 'hidden'
        });

        // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        const innerGlow = document.createElement('div');
        Object.assign(innerGlow.style, {
            position: 'absolute',
            top: '1px',
            left: '1px',
            right: '1px',
            bottom: '1px',
            borderRadius: '3px',
            background: 'radial-gradient(circle at 30% 30%, rgba(255, 215, 0, 0.1) 0%, transparent 70%)',
            pointerEvents: 'none'
        });
        button.appendChild(innerGlow);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const content = document.createElement('div');
        Object.assign(content.style, {
            position: 'relative',
            zIndex: '2',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center'
        });

        const iconSpan = document.createElement('span');
        iconSpan.textContent = icon;
        iconSpan.style.fontSize = '16px';
        iconSpan.style.lineHeight = '1';

        content.appendChild(iconSpan);
        button.appendChild(content);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏—è
        button.addEventListener('mouseenter', () => {
            button.style.transform = 'translateY(-1px)';
            button.style.boxShadow = '0 4px 8px rgba(0,0,0,0.4)';
            button.style.background = 'radial-gradient(circle, rgba(30,25,40,0.95) 0%, rgba(15,12,20,0.98) 100%)';
        });
        
        button.addEventListener('mouseleave', () => {
            button.style.transform = 'translateY(0)';
            button.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)';
            button.style.background = 'radial-gradient(circle, rgba(20,15,30,0.95) 0%, rgba(10,8,15,0.98) 100%)';
        });

        button.addEventListener('mousedown', () => {
            button.style.transform = 'translateY(1px)';
        });

        button.addEventListener('mouseup', () => {
            button.style.transform = 'translateY(-1px)';
        });

        return button;
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async createSettingsWindow() {
        if (document.getElementById('settings-window')) return;

        const settingsWindow = document.createElement('div');
        settingsWindow.id = 'settings-window';
        
        Object.assign(settingsWindow.style, {
            position: 'fixed',
            top: '110px',
            left: '10px',
            width: '170px',
            background: 'linear-gradient(135deg, #1a1a1a 85%, #FFD700 100%)',
            color: '#ffffff',
            border: '1.5px solid #FFD700',
            borderRadius: '12px',
            padding: '10px 8px 8px 8px',
            boxShadow: '0 6px 24px 0 rgba(0,0,0,0.18)',
            zIndex: '1000',
            display: 'none',
            fontFamily: 'Segoe UI, Arial, sans-serif',
            fontSize: '11px',
            userSelect: 'none'
        });

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const title = this.createTitle();
        settingsWindow.appendChild(title);

        // –ì—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const settingsGroups = this.createSettingsGroups();
        settingsGroups.forEach(group => settingsWindow.appendChild(group));

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const controlButtons = this.createControlButtons();
        controlButtons.forEach(button => settingsWindow.appendChild(button));

        document.body.appendChild(settingsWindow);
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    createTitle() {
        const title = document.createElement('div');
        title.style.textAlign = 'center';
        title.style.fontWeight = 'bold';
        title.style.marginBottom = '8px';
        title.style.fontSize = '12px';
        title.style.color = '#FFD700';
        title.innerHTML = `‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ${window.BotConfig.SCRIPT_COMMIT}`;
        return title;
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    createSettingsGroups() {
        const groups = [];

        // –õ–æ–∫–∞—Ü–∏—è
        groups.push(this.createRadioGroup({
            label: '–õ–æ–∫–∞—Ü–∏—è:',
            name: 'location',
            options: ['–ü—Ä–∏–≥–æ—Ä–æ–¥', '–ü—Ä–æ–∫–ª—è—Ç—ã–π —Å–∞–¥', '–û–∫—Ä–∞–∏–Ω–∞ –ª–µ—Å–∞', '–û–∑–µ—Ä–æ –ö–æ—Ä–æ–ª–µ–π', '–ó–µ–ª–µ–Ω—ã–µ —Ç–æ–ø–∏', '–°—Ç–∞—Ä—ã–µ —Ä—É–¥–Ω–∏–∫–∏'],
            selectedValue: window.BotConfig.selectedLocation,
            onChange: (value) => { window.BotConfig.selectedLocation = value; }
        }));

        // –ö–ª–∞—Å—Å
        groups.push(this.createRadioGroup({
            label: '–ö–ª–∞—Å—Å:',
            name: 'class',
            options: ['–í–æ–∏–Ω', '–£–±–∏–π—Ü–∞', '–õ—É—á–Ω–∏–∫', '–ú–∞–≥'],
            selectedValue: window.BotConfig.selectedClass,
            onChange: (value) => { window.BotConfig.selectedClass = value; }
        }));

        // –ü—Ä–æ–¥–∞–∂–∞ –≤–µ—â–µ–π
        groups.push(this.createRadioGroup({
            label: '–ü—Ä–æ–¥–∞–∂–∞:',
            name: 'sell',
            options: ['–ü—Ä–æ–¥–∞–≤–∞—Ç—å –≤–µ—â–∏', '–ù–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å'],
            selectedValue: window.BotConfig.sellItemsSetting,
            onChange: (value) => { window.BotConfig.sellItemsSetting = value; }
        }));

        // –ß–µ–º–ø–∏–æ–Ω—ã
        groups.push(this.createRadioGroup({
            label: '–ß–µ–º–ø–∏–æ–Ω—ã:',
            name: 'champions',
            options: ['–ê—Ç–∞–∫–æ–≤–∞—Ç—å —á–∞–º–ø–æ–≤', '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞–º–ø–æ–≤'],
            selectedValue: window.BotConfig.attackChampionsSetting,
            onChange: (value) => { window.BotConfig.attackChampionsSetting = value; }
        }));

        return groups;
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
     */
    createRadioGroup({ label, name, options, selectedValue, onChange }) {
        const group = document.createElement('div');
        group.style.marginBottom = '8px';

        const labelElement = document.createElement('div');
        labelElement.textContent = label;
        labelElement.style.fontSize = '10px';
        labelElement.style.fontWeight = 'bold';
        labelElement.style.marginBottom = '3px';
        labelElement.style.color = 'var(--gold-base)';
        group.appendChild(labelElement);

        const container = document.createElement('div');
        container.style.display = 'flex';
        container.style.flexDirection = 'column';
        container.style.gap = '2px';

        options.forEach(option => {
            const optionContainer = document.createElement('div');
            optionContainer.style.display = 'flex';
            optionContainer.style.alignItems = 'center';
            optionContainer.style.gap = '4px';

            const radio = document.createElement('input');
            radio.type = 'radio';
            radio.name = name;
            radio.value = option;
            radio.checked = option === selectedValue;
            radio.style.margin = '0';
            radio.style.width = '12px';
            radio.style.height = '12px';

            const optionLabel = document.createElement('label');
            optionLabel.textContent = option;
            optionLabel.style.fontSize = '9px';
            optionLabel.style.cursor = 'pointer';
            optionLabel.style.flex = '1';

            radio.addEventListener('change', () => {
                if (radio.checked) {
                    onChange(option);
                }
            });

            optionLabel.addEventListener('click', () => {
                radio.checked = true;
                onChange(option);
            });

            optionContainer.appendChild(radio);
            optionContainer.appendChild(optionLabel);
            container.appendChild(optionContainer);
        });

        group.appendChild(container);
        return group;
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    createControlButtons() {
        const buttons = [];

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥—Ä–æ–ø–∞
        const dropButton = document.createElement('button');
        dropButton.textContent = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–æ–ø–∞';
        Object.assign(dropButton.style, {
            width: '100%',
            padding: '4px',
            fontSize: '9px',
            background: '#FFD700',
            color: '#1a1a1a',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            marginTop: '8px'
        });
        dropButton.addEventListener('click', () => {
            if (window.BotInventory && window.BotInventory.showDropSettingsModal) {
                window.BotInventory.showDropSettingsModal();
            }
        });
        buttons.push(dropButton);

        return buttons;
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
     */
    async createControlButton() {
        if (document.getElementById('control-button')) return;

        const controlButton = this.createStyledButton('control-button', '‚ñ∂');

        controlButton.addEventListener('click', async () => {
            const iconSpan = controlButton.querySelector('span');
            
            if (!window.BotConfig.isScriptRunning) {
                // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                this.deactivateAllButtons();
                
                window.BotConfig.isScriptRunning = true;
                window.BotConfig.lastStartTime = Date.now();
                iconSpan.textContent = '‚è∏';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∑–µ–ª–µ–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                this.setButtonActiveState(controlButton, true);
                
                console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...');
                if (window.BotGameLogic && window.BotGameLogic.runScript) {
                    window.BotGameLogic.runScript();
                }
            } else {
                window.BotConfig.isScriptRunning = false;
                iconSpan.textContent = '‚ñ∂';
                
                // –£–±–∏—Ä–∞–µ–º –∑–µ–ª–µ–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                this.setButtonActiveState(controlButton, false);
                
                console.log('‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...');
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ body (–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É)
        document.body.appendChild(controlButton);
    },

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
     * @param {HTMLElement} button - –∫–Ω–æ–ø–∫–∞
     * @param {boolean} isActive - –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    setButtonActiveState(button, isActive) {
        if (isActive) {
            button.style.background = 'radial-gradient(circle, rgba(30,40,15,0.95) 0%, rgba(15,20,8,0.98) 100%)';
            button.style.boxShadow = '0 2px 8px rgba(0, 255, 0, 0.5)';
            button.style.border = '1px solid rgba(0, 255, 0, 0.3)';
        } else {
            button.style.background = 'radial-gradient(circle, rgba(20,15,30,0.95) 0%, rgba(10,8,15,0.98) 100%)';
            button.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)';
            button.style.border = '1px solid rgba(128,128,128,0.3)';
        }
    },

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    deactivateAllButtons() {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–ª–µ–π
        const controlButton = document.getElementById('control-button');
        if (controlButton) {
            const iconSpan = controlButton.querySelector('span');
            if (iconSpan && iconSpan.textContent === '‚è∏') {
                window.BotConfig.isScriptRunning = false;
                iconSpan.textContent = '‚ñ∂';
                // –£–±–∏—Ä–∞–µ–º –∑–µ–ª–µ–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                this.setButtonActiveState(controlButton, false);
                console.log('‚è∏Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
        }

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –±–æ—Å—Å–æ–≤ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é
        const bossDropdownButton = document.getElementById('boss-dropdown-button');
        if (bossDropdownButton && window.BotGameLogic) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Å—Å –í–¢
            if (window.BotGameLogic.activeBossType === 'vt' && window.BotGameLogic.vtAbortController) {
                window.BotGameLogic.vtAbortController.abort();
                window.BotGameLogic.vtAbortController = null;
                console.log('‚è∏Ô∏è –§–∞—Ä–º –±–æ—Å—Å–∞ –í–¢ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Å—Å –ß–¢
            if (window.BotGameLogic.activeBossType === 'cht' && window.BotGameLogic.chtAbortController) {
                window.BotGameLogic.chtAbortController.abort();
                window.BotGameLogic.chtAbortController = null;
                console.log('‚è∏Ô∏è –§–∞—Ä–º –±–æ—Å—Å–∞ –ß–¢ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            const iconSpan = bossDropdownButton.querySelector('span');
            if (iconSpan) {
                iconSpan.textContent = '–ê–ö–¢–ò–í–ù–û–°–¢–ò';
            }
            bossDropdownButton.style.background = 'radial-gradient(circle, rgba(40,25,15,0.95) 0%, rgba(20,12,8,0.98) 100%)';
            bossDropdownButton.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)';
            window.BotGameLogic.activeBossType = null;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
            const dropdown = document.getElementById('boss-dropdown-menu');
            if (dropdown) {
                dropdown.style.display = 'none';
            }
        }
    },

    /**
     * –ü–µ—Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
     */
    repositionAllButtons() {
        const pingElement = document.querySelector('.header-ping');
        if (pingElement) {
            this.positionButtonsRelativeToPing(pingElement);
        }
    }
}; 