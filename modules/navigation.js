// –ú–æ–¥—É–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π
window.BotNavigation = {
    /**
     * –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –≥–µ–∫—Å–∞–≥–æ–Ω—É —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
     * @param {Array} priorities - –º–∞—Å—Å–∏–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
     * @param {number} timeout - —Ç–∞–π–º–∞—É—Ç
     */
    async clickHexagonWithPriority(priorities, timeout = 5000) {
        const start = Date.now();

        while (Date.now() - start < timeout) {
            if (!window.BotConfig.isScriptRunning) return false;

            const aimIcon = document.querySelector('tui-icon.svg-icon[style*="aim.svg"]');
            if (aimIcon) {
                aimIcon.click();
                await window.BotUtils.delay(100);
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–µ–∫—Å–∞–≥–æ–Ω –≥–¥–µ —Å—Ç–æ–∏—Ç –∏–≥—Ä–æ–∫
            const currentHexagon = document.querySelector('g.hex-box.current');

            let championHexes = [];
            if (window.BotConfig.attackChampionsSetting === '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞–º–ø–æ–≤') {
                championHexes = Array.from(document.querySelectorAll('g.hex-box')).filter(hex => {
                    return !!hex.querySelector('use[href="#champion"], use[xlink\\:href="#champion"]');
                });
            }

            for (const priority of priorities) {
                let hexagons = [];
                
                if (['champion', 'shrine', 'boss', 'chest-epic', 'chest-rare', 'chest-common'].includes(priority.type)) {
                    const targetUses = Array.from(document.querySelectorAll('use')).filter(use => {
                        const href = use.getAttribute('xlink:href') || use.getAttribute('href');
                        return href === priority.selector.replace('use[xlink\\:href="', '').replace('"]', '');
                    });
                    hexagons = targetUses.map(use => use.closest('g.hex-box'));
                }

                if (priority.type === 'enemies') {
                    hexagons = Array.from(document.querySelectorAll('g.hex-box')).filter(hexagon => {
                        const textElement = hexagon.querySelector('text.enemies');
                        return textElement && textElement.textContent.trim() === String(priority.value);
                    });
                }

                // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–µ–∫—Å–∞–≥–æ–Ω –≥–¥–µ —Å—Ç–æ–∏—Ç –∏–≥—Ä–æ–∫
                if (currentHexagon) {
                    hexagons = hexagons.filter(hex => hex && hex !== currentHexagon);
                }

                if (window.BotConfig.attackChampionsSetting === '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞–º–ø–æ–≤' && championHexes.length > 0) {
                    hexagons = hexagons.filter(hex => hex && !championHexes.includes(hex));
                }

                for (const hexagon of hexagons) {
                    if (!hexagon) continue;
                    
                    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏—Å–∫–∏–ª–ª–∞ –ª—É—á–Ω–∏–∫–∞ –¥–æ –∑–∞—Ö–æ–¥–∞ –Ω–∞ –≥–µ–∫—Å–∞–≥–æ–Ω
                    if (window.BotConfig.selectedClass === '–õ—É—á–Ω–∏–∫') {
                        const enemiesText = hexagon.querySelector('text.enemies');
                        const enemiesCount = enemiesText ? parseInt(enemiesText.textContent.trim(), 10) : 0;
                        const hasChampion = !!hexagon.querySelector('use[href="#champion"], use[xlink\\:href="#champion"]');
                        
                        if (enemiesCount >= 2 || hasChampion) {
                            if (window.BotCombat && window.BotCombat.useSkill) {
                                await window.BotCombat.useSkill(window.BotConfig.CLASS_SKILLS['–õ—É—á–Ω–∏–∫'].multitarget);
                                await window.BotUtils.delay(100);
                            }
                        }
                    }
                    
                    console.log(`–ù–∞–π–¥–µ–Ω –≥–µ–∫—Å–∞–≥–æ–Ω –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: ${priority.type}`);
                    this.clickHexagon(hexagon);
                    await window.BotUtils.delay(100);

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –≥–µ–∫—Å–∞–≥–æ–Ω–∞ –¥–ª—è mainLoop
                    return { found: true, type: priority.type };
                }
            }

            await window.BotUtils.delay(100);
        }

        return { found: false, type: null };
    },

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∏–∫–∞ –ø–æ –≥–µ–∫—Å–∞–≥–æ–Ω—É
     * @param {HTMLElement} hexagon - —ç–ª–µ–º–µ–Ω—Ç –≥–µ–∫—Å–∞–≥–æ–Ω–∞
     */
    clickHexagon(hexagon) {
        const rect = hexagon.getBoundingClientRect();

        const createMouseEvent = (type) => new MouseEvent(type, {
            bubbles: true,
            cancelable: true,
            view: window,
            clientX: rect.left + rect.width / 2,
            clientY: rect.top + rect.height / 2
        });

        hexagon.dispatchEvent(createMouseEvent('mousedown'));
        hexagon.dispatchEvent(createMouseEvent('mouseup'));
        hexagon.dispatchEvent(createMouseEvent('click'));
    },

    /**
     * –ö–ª–∏–∫ –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É –≥–µ–∫—Å–∞–≥–æ–Ω–∞
     * @param {HTMLElement} element - —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π <g> —ç–ª–µ–º–µ–Ω—Ç
     */
    clickPolygon(element) {
        console.log('üéØ clickPolygon: –ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É');
        
        if (!element) {
            console.error('‚ùå clickPolygon: —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω null');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ element —è–≤–ª—è–µ—Ç—Å—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–º
        if (!element.nodeType || element.nodeType !== Node.ELEMENT_NODE) {
            console.error('‚ùå clickPolygon: –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–º:', element);
            return false;
        }
        
        // –ò—â–µ–º –ø–æ–ª–∏–≥–æ–Ω: –ª–∏–±–æ —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–∏–≥–æ–Ω–æ–º, –ª–∏–±–æ –∏—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–π –ø–æ–ª–∏–≥–æ–Ω
        let targetPolygon = element;
        if (element.tagName === 'g' || element.classList.contains('hex-box')) {
            targetPolygon = element.querySelector('polygon.hexagon');
            if (!targetPolygon) {
                console.error('‚ùå clickPolygon: –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–æ—á–µ—Ä–Ω–∏–π polygon –≤ <g> —ç–ª–µ–º–µ–Ω—Ç–µ');
                return false;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ getBoundingClientRect
        if (typeof targetPolygon.getBoundingClientRect !== 'function') {
            console.error('‚ùå clickPolygon: —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç getBoundingClientRect:', targetPolygon);
            return false;
        }
        
        try {
            // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É <g> —ç–ª–µ–º–µ–Ω—Ç—É, –∞ –Ω–µ –ø–æ —Å–∞–º–æ–º—É –ø–æ–ª–∏–≥–æ–Ω—É
            const clickTarget = targetPolygon.closest('g.hex-box') || targetPolygon.parentElement || targetPolygon;
            const rect = targetPolygon.getBoundingClientRect();
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞:', rect);
            
            const clickEvent = new MouseEvent('click', {
                bubbles: true,
                cancelable: true,
                view: window,
                clientX: rect.left + rect.width / 2,
                clientY: rect.top + rect.height / 2
            });
            
            // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è
            clickTarget.click();
            console.log('‚úÖ –ö–ª–∏–∫ –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É:', error);
            return false;
        }
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–µ–∫—Å–∞–≥–æ–Ω–æ–≤
     */
    getPriorities() {
        const basePriorities = [
            { type: 'chest-epic', selector: '#chest-epic' },
            { type: 'shrine', selector: '#shrine' },
            { type: 'chest-rare', selector: '#chest-rare' },
            { type: 'chest-common', selector: '#chest-common' },
            { type: 'enemies', value: '1' },
            { type: 'enemies', value: '2' }
        ];
        
        if (window.BotConfig.attackChampionsSetting === '–ê—Ç–∞–∫–æ–≤–∞—Ç—å —á–∞–º–ø–æ–≤') {
            return [{ type: 'champion', selector: '#champion' }, ...basePriorities];
        }
        
        return basePriorities;
    },

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–ª—Ç–∞—Ä—è –∏–ª–∏ —Å—É–Ω–¥—É–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º –≥–µ–∫—Å–∞–≥–æ–Ω–µ
     */
    async isSpecialHexagon() {
        const currentHexagon = document.querySelector('g.hex-box.current');
        if (!currentHexagon) return false;

        const specialEntities = Array.from(currentHexagon.querySelectorAll('use')).find(use => {
            const href = use.getAttribute('href') || use.getAttribute('xlink:href');
            return href && (href.includes('shrine') || href.includes('chest'));
        });

        return !!specialEntities;
    },

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω–æ–≤ –±–∏—Ç–≤—ã –∏ –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ
     */
    async checkBattleMembersAndClickMap() {
        const battleMembers = document.querySelector('div.battle-members');
        if (battleMembers && battleMembers.offsetParent !== null) {
            const mapBtn = document.querySelector('div.button-icon-content tui-icon.svg-icon[style*="map.svg"]');
            if (mapBtn) {
                mapBtn.closest('div.button-icon-content').click();
                await window.BotUtils.delay(200);
                console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω —ç–∫—Ä–∞–Ω battle-members, –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ');
                return true;
            }
        }
        return false;
    },

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param {string} name - –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
     * @param {AbortSignal} abortSignal - —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã
     */
    async goToLocationByName(name, abortSignal) {
        const openMap = () => {
            const mapBtn = document.querySelector('app-button-icon.button-map[data-appearance="primary"]');
            if (mapBtn) mapBtn.click();
        };
        
        openMap();
        
        await window.BotUtils.waitFor(() => {
            if (abortSignal && abortSignal.aborted) throw new Error('goToLocationByName aborted');
            return Array.from(document.querySelectorAll('.location-list-item, .location-item, .location-name'))
                .find(el => el.textContent && el.textContent.includes(name));
        }, 100, 10000);
        
        const locBtn = Array.from(document.querySelectorAll('.location-list-item, .location-item, .location-name'))
            .find(el => el.textContent && el.textContent.includes(name));
        
        if (locBtn) locBtn.click();
        
        await window.BotUtils.waitFor(() => {
            if (abortSignal && abortSignal.aborted) throw new Error('goToLocationByName aborted');
            const header = document.querySelector('.location-header, .location-title');
            return header && header.textContent && header.textContent.includes(name);
        }, 200, 10000);
    },

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–ª–∏–≥–æ–Ω—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     * @param {string} points - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞
     * @param {AbortSignal} abortSignal - —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã
     */
    async stepToPolygonByPoints(points, abortSignal) {
        const polygon = await window.BotUtils.waitFor(() => {
            if (abortSignal && abortSignal.aborted) throw new Error('stepToPolygonByPoints aborted');
            return Array.from(document.querySelectorAll('polygon.hexagon'))
                .find(p => p.getAttribute('points') === points);
        }, 200, 10000);
        
        this.clickPolygon(polygon);
        
        await window.BotUtils.waitFor(() => {
            if (abortSignal && abortSignal.aborted) throw new Error('stepToPolygonByPoints aborted');
            const current = document.querySelector('g.hex-box.current polygon.hexagon');
            return current && current.getAttribute('points') === points;
        }, 200, 10000);
    },

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–æ—Ä–æ–¥ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
     */
    async checkAndReturnToCity() {
        try {
            const cityButton = Array.from(document.querySelectorAll('div.button-content'))
                .find(btn => btn.textContent.trim() === '–í –≥–æ—Ä–æ–¥');
            
            if (cityButton) {
                console.log('–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–í –≥–æ—Ä–æ–¥", –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ...');
                cityButton.click();
                await window.BotUtils.delay(100);
                await window.BotUtils.delay(1000);
                
                if (window.BotInventory && window.BotInventory.claimRewardButton) {
                    await window.BotInventory.claimRewardButton();
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–º–µ—Ä—Ç–µ–π
                window.BotConfig.deaths++;
                if (window.BotStatistics) {
                    window.BotStatistics.addDeaths();
                }
                console.log(`–°–º–µ—Ä—Ç—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –í—Å–µ–≥–æ —Å–º–µ—Ä—Ç–µ–π: ${window.BotConfig.deaths}`);

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–æ—è–º
                await window.BotUtils.clickByTextContent('–°—Ä–∞–∂–µ–Ω–∏—è');
                await window.BotUtils.delay(100);
                await window.BotUtils.clickByLocationName(window.BotConfig.selectedLocation);
                await window.BotUtils.delay(100);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ checkAndReturnToCity:', error);
        }
    }
}; 