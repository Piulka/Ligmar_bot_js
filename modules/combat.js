// –ú–æ–¥—É–ª—å –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
window.BotCombat = {
    async useSkill(skill) {
        const skillButton = document.querySelector(`div.action-image[style*="${skill}"]`);
        if (skillButton) {
            skillButton.click();
            await window.BotUtils.delay(100);
        }
    },

    async useSkills() {
        const skills = window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass];
        if (!skills) return;

        if (skills.attack && skills.attack.length) {
            for (const skill of skills.attack) {
                await this.useSkill(skill);
                await window.BotUtils.delay(100);
            }
        }
    },

    async checkManaAndHealth() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        const healthElement = document.querySelector('app-general-stat.profile-health .stats-line');
        if (healthElement) {
            const healthPercentage = parseFloat(healthElement.style.transform.match(/-?\d+(\.\d+)?/)[0]);
            if (healthPercentage <= -20) {
                await this.useHealthPotion();
                await window.BotUtils.delay(100);
                
                if (window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass]?.heal) {
                    await this.useSkill(window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass].heal);
                    await window.BotUtils.delay(100);
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–Ω—ã
        if (window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass]?.attack || 
            window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass]?.heal || 
            window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass]?.buff) {
            const manaElement = document.querySelector('app-general-stat.profile-mana .stats-line-mana');
            if (manaElement) {
                const manaPercentage = parseFloat(manaElement.style.transform.match(/-?\d+(\.\d+)?/)[0]);
                if (manaPercentage <= -50) {
                    await this.useManaPotion();
                    await window.BotUtils.delay(100);
                }
            }
        }
    },

    async useHealthPotion() {
        const healthPotionButtons = ['potion-health-epic', 'potion-health-rare', 'potion-health-common'];
        
        for (const potion of healthPotionButtons) {
            const potionButton = document.querySelector(`app-action-button .action-image[style*="${potion}"]`);
            if (potionButton) {
                potionButton.click();
                await window.BotUtils.delay(100);
                return true;
            }
        }
        return false;
    },

    async useManaPotion() {
        const manaPotionButtons = ['potion-mana-epic', 'potion-mana-rare', 'potion-mana-common'];
        
        for (const potion of manaPotionButtons) {
            const potionButton = document.querySelector(`app-action-button .action-image[style*="${potion}"]`);
            if (potionButton) {
                potionButton.click();
                await window.BotUtils.delay(100);
                return true;
            }
        }
        return false;
    },

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–∞—Ñ—Ñ–æ–≤
     */
    async checkAndActivateDefenseBuff() {
        const skills = window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass];
        if (!skills || !skills.buff) return;
        
        try {
            // –î–ª—è –ª—É—á–Ω–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –±–∞—Ñ—Ñ–∞
            if (window.BotConfig.selectedClass === '–õ—É—á–Ω–∏–∫') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –±–∞—Ñ—Ñ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞)
                const magicDamageBuff = document.querySelector('tui-icon.svg-icon[style*="magicGearDamageArcher.svg"]');
                if (!magicDamageBuff && skills.buff[0]) {
                    await this.useSkill(skills.buff[0].skill);
                    await window.BotUtils.delay(300);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –±–∞—Ñ—Ñ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —É–∫–ª–æ–Ω–µ–Ω–∏—è)
                const evasionBuff = document.querySelector('tui-icon.svg-icon[style*="upEvasionArcher.svg"]');
                if (!evasionBuff && skills.buff[1]) {
                    await this.useSkill(skills.buff[1].skill);
                    await window.BotUtils.delay(300);
                }
            } 
            // –î–ª—è –≤–æ–∏–Ω–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            else if (window.BotConfig.selectedClass === '–í–æ–∏–Ω') {
                const defenseIcon = document.querySelector('tui-icon.svg-icon[style*="upDefenseWarrior.svg"]');
                if (!defenseIcon && skills.buff) {
                    await this.useSkill(skills.buff);
                    await window.BotUtils.delay(100);
                }
            }
        } catch(error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–∞—Ñ—Ñ–∞:', error);
        }
    },

    async waitForEnemy(timeout = 7000) {
        const start = Date.now();
        while (Date.now() - start < timeout) {
            if (!window.BotConfig.isScriptRunning) return false;

            const enemyIcon = document.querySelector('app-icon.profile-class tui-icon[style*="mob-class-"]');
            if (enemyIcon) {
                await window.BotUtils.delay(100);
                return true;
            }

            await window.BotUtils.delay(100);
        }
        return false;
    },

    async fightEnemies(isChampionHexagon = false) {
        console.log(`‚öîÔ∏è –ù–∞—á–∏–Ω–∞—é –±–æ–π (—á–µ–º–ø–∏–æ–Ω: ${isChampionHexagon})`);
        
        window.BotConfig.vipStatus = window.BotUtils.autoDetectVipStatus();
        window.BotConfig.selectedClass = window.BotUtils.detectPlayerClass();
        
        let initialEnemyCount = 0;
        await window.BotNavigation.checkBattleMembersAndClickMap();

        const enemiesCountElement = document.querySelector('div.battle-bar-enemies-value');
        if (enemiesCountElement) {
            initialEnemyCount = parseInt(enemiesCountElement.textContent.trim(), 10) || 0;
            console.log(`üëπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤: ${initialEnemyCount}`);
        }

        if (window.BotConfig.selectedClass === '–õ—É—á–Ω–∏–∫') {
            let hasChampion = false;
            const currentHexagon = document.querySelector('g.hex-box.current');
            if (currentHexagon) {
                hasChampion = !!currentHexagon.querySelector('use[href="#champion"], use[xlink\\:href="#champion"]');
            }
            if (initialEnemyCount >= 2 || hasChampion) {
                console.log(`üèπ –ò—Å–ø–æ–ª—å–∑—É—é –º—É–ª—å—Ç–∏—Å–∫–∏–ª–ª –ª—É—á–Ω–∏–∫–∞`);
                await this.useSkill(window.BotConfig.CLASS_SKILLS['–õ—É—á–Ω–∏–∫'].multitarget);
                await window.BotUtils.delay(100);
            }
        }

        if (isChampionHexagon && window.BotConfig.selectedClass === '–õ—É—á–Ω–∏–∫' && 
            window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass].championSkill) {
            console.log(`üëë –ò—Å–ø–æ–ª—å–∑—É—é —Å–∫–∏–ª–ª –ø—Ä–æ—Ç–∏–≤ —á–µ–º–ø–∏–æ–Ω–∞`);
            await this.useSkill(window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass].championSkill);
            await window.BotUtils.delay(1500);
        }

        console.log(`üéØ –ù–∞—á–∏–Ω–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—è (VIP: ${window.BotConfig.vipStatus})`);
        let fightRounds = 0;
        
        while (window.BotConfig.isScriptRunning) {
            fightRounds++;
            console.log(`‚öîÔ∏è –†–∞—É–Ω–¥ –±–æ—è #${fightRounds}`);
            
            if (window.BotConfig.vipStatus === '–ù–µ VIP') {
                const enemiesCountElement = document.querySelector('div.battle-bar-enemies-value');
                if (enemiesCountElement && enemiesCountElement.textContent.trim() === '0') {
                    console.log(`‚úÖ –í—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–±–µ–∂–¥–µ–Ω—ã (—Å—á–µ—Ç—á–∏–∫: 0)`);
                    break;
                }

                let needSwitch = false;
                const enemyCard = document.querySelector('app-profile-card.target');
                if (enemyCard) {
                    const hpText = enemyCard.querySelector('.profile-health .stats-text');
                    if (hpText) {
                        const hpMatch = hpText.textContent.trim().match(/^(\d+)\s*\/\s*[\d, ]+$/);
                        if (hpMatch && parseInt(hpMatch[1], 10) === 0) {
                            needSwitch = true;
                        }
                    }
                    const deadIcon = enemyCard.querySelector('tui-icon.svg-icon[style*="dead.svg"]');
                    if (deadIcon) {
                        needSwitch = true;
                    }
                }
                
                if ((!enemyCard || needSwitch)) {
                    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é –≤—Ä–∞–≥–∞ (–Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏: ${!enemyCard}, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å: ${needSwitch})`);
                    const switchBtn = document.querySelector('div.button-icon-content tui-icon.svg-icon[style*="switch.svg"]');
                    if (switchBtn) {
                        switchBtn.closest('div.button-icon-content').click();
                        await window.BotUtils.delay(300);
                        continue;
                    } else {
                        console.log(`‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                        await window.BotUtils.delay(300);
                        continue;
                    }
                }
            }

            const enemyIcon = document.querySelector('app-icon.profile-class tui-icon[style*="mob-class-"]');
            await window.BotNavigation.checkAndReturnToCity();
            if (!enemyIcon) {
                console.log(`‚úÖ –í—Ä–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω`);
                break;
            }

            const enemiesCountElement2 = document.querySelector('div.battle-bar-enemies-value');
            if (enemiesCountElement2 && enemiesCountElement2.textContent.trim() === '0') {
                console.log(`‚úÖ –í—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–±–µ–∂–¥–µ–Ω—ã (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)`);
                break;
            }

            console.log(`ü©∫ –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ –∏ –º–∞–Ω—É`);
            await this.checkManaAndHealth();
            await window.BotUtils.delay(100);
            
            console.log(`üí™ –ü—Ä–æ–≤–µ—Ä—è—é –±–∞—Ñ—Ñ—ã`);
            await this.checkAndActivateDefenseBuff();
            await window.BotUtils.delay(100);
            
            console.log(`‚öîÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é –±–æ–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏`);
            await this.useSkills();
            await window.BotUtils.delay(100);
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if (fightRounds > 100) {
                console.log(`‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–æ–≤ –±–æ—è (${fightRounds}), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é`);
                break;
            }
        }

        console.log(`üéâ –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ ${fightRounds} —Ä–∞—É–Ω–¥–æ–≤`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (window.BotStatistics) {
            window.BotStatistics.addMobsKilled(initialEnemyCount);
            if (isChampionHexagon) {
                window.BotStatistics.addChampionsKilled();
            }
        }

        const isSpecial = await window.BotNavigation.isSpecialHexagon();
        if (isSpecial) {
            console.log(`üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≥–µ–∫—Å–∞–≥–æ–Ω, –∂–¥—É 5 —Å–µ–∫—É–Ω–¥`);
            await window.BotUtils.delay(5000);
        }
    }
}; 