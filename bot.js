/**
 * Ligmar Bot - –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª-–∑–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥—É–ª–µ–π
 * –í–µ—Ä—Å–∏—è: v.2.4 Modular
 */

(async function() {
    'use strict';
    
    console.log('ü§ñ Ligmar Bot - –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...');
    
    // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
    const BASE_URL = 'https://raw.githubusercontent.com/Piulka/Ligmar_bot_js/main';
    
    // –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const MODULES = [
        'modules/config.js',
        'modules/utils.js', 
        'modules/ui.js',
        'modules/navigation.js',
        'modules/combat.js',
        'modules/inventory.js',
        'modules/statistics.js',
        'modules/gameLogic.js'
    ];
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     * @param {string} moduleUrl - URL –º–æ–¥—É–ª—è
     */
    async function loadModule(moduleUrl) {
        try {
            const response = await fetch(`${BASE_URL}/${moduleUrl}?nocache=${Date.now()}`);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const code = await response.text();
            eval(code);
            console.log(`‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: ${moduleUrl}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleUrl}:`, error);
            throw error;
        }
    }
    
    /**
     * –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    async function loadAllModules() {
        console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...');
        
        for (const module of MODULES) {
            await loadModule(module);
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        console.log('‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    function verifyModules() {
        const requiredModules = [
            'BotConfig',
            'BotUtils', 
            'BotUI',
            'BotNavigation',
            'BotCombat',
            'BotInventory',
            'BotStatistics',
            'BotGameLogic'
        ];
        
        const missingModules = requiredModules.filter(module => !window[module]);
        
        if (missingModules.length > 0) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏:', missingModules);
            return false;
        }
        
        console.log('‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ');
        return true;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
     */
    async function initializeBot() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');
        
        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            await window.BotUI.createSettingsButton();
            await window.BotUI.createSettingsWindow();
            await window.BotUI.createControlButton();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if (window.BotStatistics) {
                await window.BotStatistics.createStatisticsElement();
                window.BotStatistics.initializeStatistics();
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –±–æ—Å—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è)
            if (window.BotGameLogic && window.BotGameLogic.createBossButtons) {
                window.BotGameLogic.createBossButtons();
            }
            
            console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
            console.log('üéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
        }
    }
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞
    try {
        await loadAllModules();
        
        if (verifyModules()) {
            await initializeBot();
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏');
        }
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    }
    
})();
